#include<stdio.h>
#include<stdlib.h>

typedef struct Node Node;

struct Node{
    int value;
    Node *next;
};

Node* addNode(int length, char*argv[]);
int search_highest_degree(Node *head);
void print_highest_display(int degree);

int main(int argc, char*argv[])
{
    int length = argc - 1;
    Node* head = NULL;
    head = addNode(length, argv);
    int degree = search_highest_degree(head);
    print_highest_display(degree);

    return 0;
}

Node* addNode(int length, char*argv[])
{
    Node* head = NULL;
    Node* current = NULL;

    head = (Node*)calloc(1, sizeof(Node));
    current = head;

    for(int i = 0; i < length; ++i)
    {
        current->value = atoi(argv[i+1]);
// printf("%d\n", current->value);

        //Check if the last node
        if(i == length){
            current->next = NULL;
        } else {
            current->next = (Node*)calloc(1, sizeof(Node));
            current = current->next;
        }
    }

    return head;
}

int search_highest_degree(Node *head){

    Node* outer = NULL;
    Node* inner = NULL;
    int degree = 0;
    for(outer = head; outer != NULL; outer = outer->next)
    {
int count = 0;
    //printf("outer: %d\n", outer->value);
    // int target = outer->value;
        for(inner = head; inner != NULL; inner = inner->next)
        {
            //printf("%d\n", inner->value);
            if (outer->value == inner->value)
            {
                count++;
            }
        }
        if (degree < count)
        {
            degree = count;
        }
    }

    return degree;
}

void print_highest_display(int degree)
{
    printf("%d\n", degree);
}